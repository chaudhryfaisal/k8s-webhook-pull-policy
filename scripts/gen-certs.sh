#! /bin/bash

WEBHOOK_NS=k8s-webhook-pull-policy
WEBHOOK_NAME=k8s-webhook-pull-policy
WEBHOOK_SVC=${WEBHOOK_NAME}.${WEBHOOK_NS}.svc
K8S_OUT_CERT_FILE=./deploy/app-certs.yaml
K8S_OUT_WEBBOK_FILE=./deploy/webhooks.yaml

CA_INFO='{"CN":"K8S Webhook Pull Policy Root CA","key":{"algo":"rsa","size":2048},"names":[{"C":"US","L":"LIC","O":"K8S","OU":"Webhook","ST":"NY"}]}'
CA_CERT="./ca.pem"
OUT_CERT="./webhook.pem"
OUT_KEY="./webhook-key.pem"
# Create CA if needed
test -f $CA_CERT || echo "$CA_INFO" | cfssl gencert -initca - | cfssljson -bare ca
# Create certs for our webhook
echo '{"CN":"'${WEBHOOK_SVC}'","hosts":["'${WEBHOOK_SVC}'"],"key":{"algo":"rsa","size":2048}}' | \
    cfssl gencert -ca=$CA_CERT -ca-key=ca-key.pem -profile=server - | \
    cfssljson -bare webhook
cfssl certinfo -cert $OUT_CERT
# Create certs secrets for k8s.
rm ${K8S_OUT_CERT_FILE}
kubectl -n ${WEBHOOK_NS} create secret generic \
    ${WEBHOOK_NAME}-certs \
    --from-file=key.pem=${OUT_KEY} \
    --from-file=cert.pem=${OUT_CERT}\
    --dry-run=client -o yaml > ${K8S_OUT_CERT_FILE}

# Set the CABundle on the webhook registration.
CA_BUNDLE=$(cat $CA_CERT | base64 --break 0)
sed "s/CA_BUNDLE/${CA_BUNDLE}/" ./deploy/webhooks.yaml.tpl > ${K8S_OUT_WEBBOK_FILE}

# Clean.
rm -f *.pem *.csr

# Add note of autogenerated file.
sed -i '' '1i\
# File autogenerated by ./scripts/gen-certs.sh' ${K8S_OUT_CERT_FILE}
sed -i '' '1i\
# File autogenerated by ./scripts/gen-certs.sh' ${K8S_OUT_WEBBOK_FILE}
